name: Create SP530E Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build all SP530E variants
      run: |
        echo "Building all SP530E firmware variants..."
        pio run -e esp32c3dev_4MB_audioreactive
        pio run -e esp32c3dev_4MB
        
    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        DATE=$(date +%Y%m%d)
        
        # Audio Reactive Build
        if [ -f ".pio/build/esp32c3dev_4MB_audioreactive/firmware.bin" ]; then
          cp ".pio/build/esp32c3dev_4MB_audioreactive/firmware.bin" \
             "release-artifacts/WLED_SP530E_AudioReactive_${VERSION}.bin"
        fi
        
        # Standard Build  
        if [ -f ".pio/build/esp32c3dev_4MB/firmware.bin" ]; then
          cp ".pio/build/esp32c3dev_4MB/firmware.bin" \
             "release-artifacts/WLED_SP530E_Standard_${VERSION}.bin"
        fi
        
        # Create release notes
        cat > release-artifacts/RELEASE_NOTES.md << EOF
        # WLED SP530E ${VERSION}
        
        ## 📦 Downloads
        
        ### 🎵 Audio Reactive (Recommended)
        - **WLED_SP530E_AudioReactive_${VERSION}.bin** - Full featured with audio reactive capabilities
        
        ### 📡 Standard  
        - **WLED_SP530E_Standard_${VERSION}.bin** - Basic LED control without audio features
        
        ## 🔧 Installation
        
        1. **Verify** your SP530E has ESP32-C3 hardware modifications
        2. **Download** the appropriate .bin file above
        3. **Flash** using ESPTool or ESP Flash Download Tool:
           \`\`\`
           esptool.py --chip esp32c3 --port COM_PORT write_flash 0x0000 WLED_SP530E_*.bin
           \`\`\`
        
        ## ⚠️ Important
        - **Only for hardware-modified SP530E controllers**
        - **ESP32-C3 chip required**
        - **Do not flash to unmodified SP530E**
        
        ## 📋 Features in This Release
        - Custom boot status LED indication
        - WiFi status LED monitoring  
        - ESP32-C3 optimized performance
        - 4MB flash memory support
        - Audio reactive capabilities (AudioReactive build)
        
        ## 🐛 Known Issues
        - None reported for this release
        
        ## 📚 Documentation
        - [Full README](https://github.com/johnvoipguy/wled-sp530e-mods/blob/sp530e-mods/README.md)
        - [Hardware Modification Guide](https://github.com/johnvoipguy/wled-sp530e-mods/blob/sp530e-mods/SP530E_UPGRADE_CHECKLIST.md)
        
        ---
        Built on: $(date)
        Commit: ${GITHUB_SHA}
        EOF
        
        # Create installation script
        cat > release-artifacts/flash_sp530e.sh << 'EOF'
        #!/bin/bash
        # SP530E Flashing Script
        
        echo "SP530E WLED Flashing Script"
        echo "=========================="
        
        # Check if esptool is installed
        if ! command -v esptool.py &> /dev/null; then
            echo "Error: esptool.py not found. Install with: pip install esptool"
            exit 1
        fi
        
        # List available firmware files
        echo "Available firmware files:"
        ls -1 *.bin 2>/dev/null || { echo "No .bin files found!"; exit 1; }
        
        echo ""
        echo "Enter the firmware filename to flash:"
        read FIRMWARE
        
        if [ ! -f "$FIRMWARE" ]; then
            echo "Error: File $FIRMWARE not found!"
            exit 1
        fi
        
        echo ""
        echo "Enter COM port (e.g., COM3 on Windows, /dev/ttyUSB0 on Linux):"
        read PORT
        
        echo ""
        echo "Flashing $FIRMWARE to SP530E on port $PORT..."
        echo "Make sure your SP530E is in download mode!"
        
        esptool.py --chip esp32c3 --port "$PORT" write_flash 0x0000 "$FIRMWARE"
        
        echo ""
        echo "Flashing complete! Your SP530E should restart automatically."
        echo "Connect to WLED-AP WiFi network to configure."
        EOF
        
        chmod +x release-artifacts/flash_sp530e.sh
        
        echo "Release artifacts prepared:"
        ls -la release-artifacts/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: SP530E WLED ${{ github.event.inputs.version || github.ref_name }}
        body_path: release-artifacts/RELEASE_NOTES.md
        files: |
          release-artifacts/*.bin
          release-artifacts/flash_sp530e.sh
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}